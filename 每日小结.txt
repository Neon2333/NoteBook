TODO：
（1）修改SystemConfigure的【参数列表】，在当中添加参数。
（2）将界面图标替换成透明底白色。（已完成，剩余：后退/删除/全部删除）
（3）将Load界面的蓝色背景选择一个适当的加以替换。

2021/4/13
1.对照页面看控件库WorkControl代码。页面中有5个按钮事件，重点学习C#事件与委托。
2.给TitleBarControl控件，修改加上按下按钮出现输入密码界面。
Q:
(1)Template.cs
62行和108行，Global的WorkState给titleBar的WorkState，又反过来给。
(2)titleBarControl.cs
bWorkState的初始值问题。

2021/4/14
1.搞懂事件与委托。
搞懂WorkControl第462行，按钮按下调用myButton_System_Click，继而调用System_Click事件。
该事件调用Work.cs的第2386行的workControl1_System_Click事件。创建SystemConfigure窗口。
Work=
2.看SystemControl.cs，以及CustomerList.cs。SystemControl和TitleBar共同构成SystemConfigure。
Q:
(1)SystemControl.cs第620行中的 CustomButton_BackgroundImage。
(2)SystemControl.cs第412行_Apply()。

2021/4/15
1.Work/SystemConfigure等含有titleBar的界面都是继承自Template。titleBar修改的时候，这些控件
也会改变。Work=template+workcontrol。
2.SystemConfigure继承自Template，并使用了控件SystemControl。
3.找界面图标，供后续筛选


2021/4/16
1.学习openCV4，Mat的创建/赋值/元素访问。
2.将控件库的一些图标进行了替换。并搞明白了资源的添加。
在项目属性中打开资源管理，可以新建添加/添加已有文件，随后就会自动将图片添加到resource文件夹
且resource列表下也会有。不要再resource文件夹下手动增加或删除。

2021/4/17pm
1.学习OpenCV4。

2021/4/19
1.学习OpenCV4，到P67。

2021/4/20
1.学习OpenCV4，到P95。

2021/4/21
1.学习OpenCV4。
======================================================================
2021/4/22
1.学习OpenCV4，到P105。

2021/4/23
1.OpenCV4

2021/4/26
1.学习MySql到P53。

2021/4/27
1.MySQL必知必会到P71
2.学习正则表达式

2021/4/28
1.MySQL必知必会到P88。做了几道基础练习。（发现后续练习需要函数，继续看函数的使用）

2021/4/29
1.写一个小功能：连接MySQL，在“查询框”中输入任意一个字段的值，点击“查询”按钮，在下方
显示条盒的字段值和包的字段值，且条盒与包的显示分为两个datagridview，若查询不到显示“未查到”
（进度70%）
2.学习C#连接MySQL等相关知识

2021/4/30
1.系统学习C#连接MySQL及dataGridView，并总结笔记
=========================================================================
2021/5/6
1.实现4/29日要求的小功能。并总结C#操作MySQL笔记。

2021/5/7
1.MySQL必知必会到P110，做子查询相关练习
2.不再使用cmd，学习使用Navicat操作mysql

2021/5/10
am:MySQL
pm：请假
2021/5/11
请假

2021/5/12
看Work.cs

2021/5/13-5/15
完成新的需求（显示扫码器拍摄的图像，显示读取的内容，并对total/ok/ng/recograte计数）

2021/5/16-2021/5/21
学习OpenCV4到图像形态学操作，并总结每章节笔记和demo。

2021/5/24-5/25
1. 学习SQLite

2021/5/26-27
1. 写C# SQLite操作类
2. 实现SQLite的建库、建表、通过变量赋值插入100万条数据。耗时：20s，db文件大小40M。

2021/5/28
1. 基于SQLite操作类，建库TP，建表CAMERA1和CAMERA2，字段为：BRAND TEXT/RESULT TINYINT/shijian(TIMESTAMP)。
插入100万条数据。最初使用C#获取系统时间赋值，速度非常慢。100条数据需要几十秒。更换方法后，单线程插入100万条数据耗时：
20s，db文件大小64M，查询50万条数据耗时0.7s。
（难点：1.最初使用DATATIME类型数据，不用变量赋值后，更换为TIMESTAMP。2.TIMESTAMP类型数据的赋值，采用变量赋值出现格式错误，且C#调用系统时间赋值很慢。最后采用在INSERT语句内直接调用SQLite的
时间戳函数将时间戳赋值给字段。3.向db文件中写数据很慢，所以需要使用事务，将多条插入语句的操作一次性提交到文件，大大提高
速度）
建立索引前插入100万条数据耗时100s，建立索引后插入100万条数据耗时200多s。可见索引虽然可以
提高查询速度，但是频繁插入大量数据的表最好不要建立索引，或者先插入再建立索引。


2021/5/29-5/30
学习C#多线程，并总结笔记。
装机箱
给二维码机箱装软件

2021/5/31
将调试成功的代码，拆分成SqliteHelper.dll和测试工程。
=================================================================================
2021/6/1
1. 搞清楚了在家里同样代码在.NET5.0上无法运行的原因：SQLITE.dll区分.net版本和x64/x86。另外自己电脑上安装.net4.6.1，但是
工程选择目标时却没有.NET4.6.1的选项问题未解决。
原项目是.net4.5.2，后更换成4.6.1，并且今天才发现Sqlite.dll版本不对，然后更换成了x64的版本。
2. 学习C#多线程，创建线程Thread类、线程池、委托异步执行，C#语言中的线程同步lock/Monitor。写了几个小demo调试了一下，加深
对2条线程访问上锁代码块的理解。

2021/6/2
1. 总结C#多线程笔记。将SqliteDemo1代码修改为两个子线程分别随机向表1、表2插入数据，总条数total。
修改时间戳，精确到毫秒。

2021/6/3
1.完成需求：读Excel表1，按照BRAND/起始时间/终止时间从Sqlite中读取相应记录。统计BRAND
/记录总数/RESULT=0的记录条数。写入Excel表2。 

2021/6/4
1. 复习winform，并整理笔记。